map()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回
>>> def f(x):
...     return x*x
...
>>> r=map(f,[1,2,3,4,5,6,7,8,9])
>>> r
<map object at 0x000000000205B5C0>
>>> next(r)
1
>>> list(r)
[4, 9, 16, 25, 36, 49, 64, 81]
>>> L=[]
>>> for n in range(1,10):
...     L.append(f(n))
...
>>> L
[1, 4, 9, 16, 25, 36, 49, 64, 81]
>>> list(map(str,[1,2,3,4,5,6,7,8,9]))
['1', '2', '3', '4', '5', '6', '7', '8', '9']

reduce()把一个函数作用在一个序列[x1, x2, x3, ...]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，其效果就是：reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)

>>> from functools import reduce
>>> def add(x,y):
...     return x+y
...
>>> reduce(add,[1,3,5,7,9])
25
>>> 1+3+5+7+9
25
>>> sum([1,3,5,7,9])
25
>>> def mul(x,y):
...     return x**y  # x的y次方
...
>>> reduce(mul,[1,2,3,4,5])
1
>>> reduce(mul,[2,3,4,5])
1152921504606846976
>>> ((2**3)**4)**5
1152921504606846976
>>> def fn(x,y):
...     return x*10+y
...
>>> reduce(fn,[1,3,5,7,9])
13579
>>> list(map(str,[1,3,5,7,9]))
['1', '3', '5', '7', '9']
>>> def fx(a,b):
...     return a+b
...
>>> reduce(fx,list(map(str,[1,3,5,7,9])))
'13579'
>>> int(reduce(fx,list(map(str,[1,3,5,7,9]))))
13579
>>> int(reduce(fx,map(str,[1,3,5,7,9])))
13579
>>> def char2num(s):
...     return {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7,
'8': 8, '9': 9}[s]
...
>>> char2num('1')
1
>>> char2num('3')
3
>>> map(char2num,'13579')
<map object at 0x000000000205BB00>
>>> list(map(char2num,'13579'))
[1, 3, 5, 7, 9]
>>> reduce(fn,map(char2num,'13579'))
13579

