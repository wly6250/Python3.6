①迭代
可以直接作用于for循环的对象统称为可迭代对象：Iterable。

・一类是集合数据类型，如list、tuple、dict、set、str等；
・一类是generator，包括生成器和带yield的generator function。

可以使用isinstance()判断一个对象是否是Iterable对象：
>>> from collections import Iterable
>>> isinstance([],Iterable)
True
>>> isinstance({},Iterable)
True
>>> isinstance('abc',Iterable)
True
>>> isinstance((x for x in range(100)),Iterable)
True
>>> isinstance(123,Iterable)
False

②迭代器
可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator。

可以使用isinstance()判断一个对象是否是Iterator对象：
>>> from collections import Iterator
>>> isinstance((x for x in range(10)),Iterator)
True
>>> isinstance([],Iterator)
False
>>> isinstance({},Iterator)
False
>>> isinstance('abc',Iterator)
False

生成器都是Iterator对象，但list、dict、str虽然是Iterable，却不是Iterator。

③把list、dict、str等Iterable变成Iterator可以使用iter()函数：
>>> isinstance(iter([]),Iterator)
True
>>> isinstance(iter({}),Iterator)
True
>>> isinstance(iter('abc'),Iterator)
True

④Test-----------------------------------------------------
>>> a='abc'
>>> b=iter('abc')
>>> a
'abc'
>>> b
<str_iterator object at 0x00000000025654E0>
>>> next(a)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object is not an iterator
>>> next(b)
'a'
>>> next(b)
'b'
>>> next(b)
'c'
>>> next(b)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
StopIteration

小结:
①凡是可作用于for循环的对象都是Iterable类型；

②凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列；

③集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。

④迭代器的循环：
# 首先获得Iterator对象:
it = iter([1, 2, 3, 4, 5])
# 循环:
while True:
    try:
        # 获得下一个值:
        x = next(it)
    except StopIteration:
        # 遇到StopIteration就退出循环
        break
